#lang racket
(require "../translate.rkt")
(require "../syntax.rkt")
(require "../ast.rkt")
(require rackunit)
(check-equal? (translate (sexpr->ast '(let ((x 0)) x)))
              (sexpr->ast '(let ((_ 0)) (address 0))))
(check-equal? (translate (sexpr->ast '(let ((x 0)) (let ((y 1)) x))))
              (sexpr->ast '(let ((_ 0)) (let ((_ 1)) (address 1)))))
(check-equal? (translate (sexpr->ast '(let ((x 0)) (let ((y 1)) y))))
              (sexpr->ast '(let ((_ 0)) (let ((_ 1)) (address 0)))))
(check-equal? (translate (sexpr->ast '(let ((x 0))
                            (let ((y x))
                              y))))
              (sexpr->ast '(let ((_ 0))
                 (let ((_ (address 0)))
                   (address 0)))))
