DVH rewrite Fall 2020

Goals:

- Make self-hosting by end <-- This likely won't happen this semester
- Eliminate quasiqote, unquote usage.
- Eliminate s-expr-based data types.
- Eliminate lexing and parsing; use read from start.
- Add I/O, read-byte, write-byte.  Build from there.
- Add symbols w/ symbol table.
- Add GC.
- Add Bignums. <-- Likely won't happen
- Rewrite assignments. <-- Leaving up to LL and JC
- More static checking & better error messages for a86 before generating nasm.
  Should be impossible to generate code that nasm rejects.

Possible assignment ideas:

- After Extort: catch and signal errors on integer over/under-flow
- Implement an interpreter for a86 (the mini-x86 language)
- Implement read-char, peek-char in terms of read-byte, peek-byte
- Implement read in terms of read-char, peek-char
- Implement prefab structures
- Implement bignum arithmetic library

DVH ideas for Fall 2021

- Rewrite a86 chapter to split out "reference" from "introduction"
- Assignment 1 could be a86 peephole optimizer; given a template, show rewriting examples
  test against generated code from the end of the course, measure instruction count
  against a reference implementation.  Accomplishes both getting comfortable with
  Racket and a86 (and power of code as data) and... can be plugged in to 
  back-end of compiler later.
- Add a note explaining #:prefab when it first appears
- Add a note about "types" in Racket: a useful concept for organizing programs even
  without an enforcement mechanism (and there's #lang typed/racket)
